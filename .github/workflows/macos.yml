name: Android Emulator with Logcat

on:
  workflow_dispatch:

jobs:
  emulator-job:
    runs-on: macos-latest
    timeout-minutes: 30

    steps:
      - name: Cleanup previous runs
        run: |
          pkill -f "emulator" || true
          pkill -f "adb" || true
          rm -rf "${{ runner.temp }}/android-sdk" "${{ runner.temp }}/android-avd"

      - name: Set environment variables
        run: |
          echo "ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=${{ runner.temp }}/android-avd" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/android-avd"

      - name: Install Android SDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          curl -fo commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-mac-10406996_latest.zip
          unzip -q commandlinetools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          rm commandlinetools.zip
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Install packages (with verification)
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "emulator" "system-images;android-33;google_apis_playstore;arm64-v8a"
          
          # Debug: Verify installation
          echo "=== Installed Packages ==="
          sdkmanager --list
          echo "=== System Images ==="
          ls -la "$ANDROID_SDK_ROOT/system-images/android-33/google_apis_playstore/arm64-v8a/"

      - name: Create AVD (with debug output)
        run: |
          echo "=== Creating AVD ==="
          echo "no" | avdmanager create avd \
            -n testEmulator \
            -k "system-images;android-33;google_apis_playstore;arm64-v8a" \
            -d pixel \
            -c 2048M

          # Critical configuration
          cat <<EOF >> "$ANDROID_AVD_HOME/testEmulator.avd/config.ini"
          hw.gpu.enabled=yes
          hw.gpu.mode=swiftshader_indirect
          hw.ramSize=2048
          vm.heapSize=512  # Must match log output
          disk.dataPartition.size=2G
          image.sysdir.1=system-images/android-33/google_apis_playstore/arm64-v8a/
          EOF

          # Debug: Verify AVD
          echo "=== AVD Config ==="
          cat "$ANDROID_AVD_HOME/testEmulator.avd/config.ini"

      - name: Start Emulator (with HVF fix)
        run: |
          echo "=== Starting Emulator ==="
          # Disable HVF acceleration explicitly
          $ANDROID_SDK_ROOT/emulator/emulator \
            -avd testEmulator \
            -no-audio \
            -no-window \
            -gpu swiftshader_indirect \
            -no-snapshot \
            -no-accel \  # Critical fix for HVF error
            -verbose > emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV

          # Debug: Verify process
          sleep 5
          echo "=== Running Processes ==="
          ps -ef | grep emulator || true
          echo "=== Emulator Log Head ==="
          head -20 emulator.log

      - name: Wait for boot (with robust checks)
        timeout-minutes: 10
        run: |
          echo "=== Waiting for Boot ==="
          adb start-server
          
          # Phase 1: Wait for device connection
          for i in {1..60}; do
            DEVICES=$(adb devices)
            echo "$DEVICES"
            
            if echo "$DEVICES" | grep -q emulator; then
              echo "✅ Device detected"
              break
            fi
            echo "Waiting for device ($i/60)..."
            sleep 5
          done
          
          # Phase 2: Wait for full boot
          for i in {1..60}; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null || echo "")
            bootanim=$(adb shell getprop init.svc.bootanim 2>/dev/null || echo "running")
            
            if [[ "$boot_completed" == "1" && "$bootanim" == "stopped" ]]; then
              echo "✅ Fully booted!"
              adb shell input keyevent 82  # Wake up
              exit 0
            fi
            
            # Debug: Additional checks
            echo "Status ($i/60): boot_completed=$boot_completed, bootanim=$bootanim"
            echo "=== ADB Devices ==="
            adb devices -l
            sleep 5
          done
          
          # Debug: Failure investigation
          echo "❌ Boot failed!"
          echo "=== Last 50 Log Lines ==="
          tail -50 emulator.log
          echo "=== ADB Properties ==="
          adb shell getprop || true
          exit 1

      - name: Capture Logs
        if: always()
        run: |
          echo "=== Final Debug ==="
          echo "--- Processes ---"
          ps -ef | grep -E 'emulator|adb'
          echo "--- Network ---"
          netstat -an | grep 555 || true
          echo "--- ADB Devices ---"
          adb devices -l || true
          echo "--- Logcat ---"
          #adb logcat -d > logcat.txt || true
          tail -200 emulator.log > emulator-tail.log

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            logcat.txt
            emulator.log
            emulator-tail.log
