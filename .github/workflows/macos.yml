name: Android Emulator with Logcat

on:
  workflow_dispatch:

jobs:
  emulator-job:
    runs-on: macos-latest
    timeout-minutes: 45

    steps:
      - name: Set environment variables
        run: |
          echo "ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "JAVA_HOME=/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home" >> $GITHUB_ENV

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK Command Line Tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools"
          curl -fo commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-mac-10406996_latest.zip
          unzip -q commandlinetools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools"
          # Extract version from source.properties and rename folder accordingly
          version=$(grep "Pkg.Revision" $ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools/source.properties | cut -d'=' -f2 | tr -d '[:space:]')
          mv "$ANDROID_SDK_ROOT/cmdline-tools/cmdline-tools" "$ANDROID_SDK_ROOT/cmdline-tools/$version"
          rm commandlinetools.zip

      - name: Set up Android SDK environment variables
        run: |
          echo "$ANDROID_SDK_ROOT/cmdline-tools/$version/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH

      - name: Accept SDK licenses
        run: |
          yes | sdkmanager --licenses

      - name: Install SDK Packages
        run: |
          sdkmanager "platform-tools" "emulator" "system-images;android-34;google_apis_playstore;arm64-v8a"

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd -n testEmulator -k "system-images;android-34;google_apis_playstore;arm64-v8a" -d "pixel"
          # Force config to avoid boot issues
          echo "hw.gpu.enabled=yes" >> ~/.android/avd/testEmulator.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> ~/.android/avd/testEmulator.avd/config.ini
          echo "showDeviceFrame=no" >> ~/.android/avd/testEmulator.avd/config.ini

      - name: Verify SDK Tools
        run: |
          echo "Checking if sdkmanager is available"
          which sdkmanager
          sdkmanager --version
          echo "Checking if emulator is available"
          which emulator
          emulator -version

      - name: Start Emulator in Background
        run: |
          nohup $ANDROID_SDK_ROOT/emulator/emulator -avd testEmulator -no-audio -no-window -gpu swiftshader_indirect -verbose > emulator.log 2>&1 &

      - name: Check Emulator Process
        run: ps -ef | grep emulator

      - name: Wait for Emulator to Boot
        run: |
          echo "Waiting for emulator..."
          boot_completed=""
          for i in {1..60}; do
            adb devices
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null | tr -d '\r')
            if [[ "$boot_completed" == "1" ]]; then
              echo "✅ Emulator booted!"
              exit 0
            fi
            echo "Still booting... ($i/60)"
            sleep 10
          done
          echo "❌ Emulator failed to boot"
          exit 1

      - name: Start Logcat Capture
        run: |
          nohup adb logcat > logcat_output.txt 2>&1 &
          echo "Capturing logcat for 30 minutes..."
          sleep 1800

      - name: Upload Logcat
        uses: actions/upload-artifact@v4
        with:
          name: logcat-output
          path: logcat_output.txt

      - name: Upload Emulator Logs (Always)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-log
          path: emulator.log
