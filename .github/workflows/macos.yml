name: Android Emulator with Logcat

on:
  workflow_dispatch:

jobs:
  emulator-job:
    runs-on: macos-latest
    timeout-minutes: 30  # Reduced timeout since we'll fail faster

    steps:
      - name: Cleanup previous runs
        run: |
          pkill -f "emulator" || true
          rm -rf "${{ runner.temp }}/android-sdk" "${{ runner.temp }}/android-avd"

      - name: Set environment variables
        run: |
          echo "ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=${{ runner.temp }}/android-avd" >> $GITHUB_ENV
          echo "JAVA_HOME=/Library/Java/JavaVirtualMachines/temurin-17.jdk/Contents/Home" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/android-avd"

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '17'

      - name: Install Android SDK Command Line Tools
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          curl -fo commandlinetools.zip https://dl.google.com/android/repository/commandlinetools-mac-10406996_latest.zip
          unzip -q commandlinetools.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          rm commandlinetools.zip

      - name: Add Android tools to PATH
        run: |
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Install SDK Packages
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "emulator" "system-images;android-33;google_apis_playstore;arm64-v8a"
          # Verify installation
          ls -la $ANDROID_SDK_ROOT/system-images/android-33/google_apis_playstore/arm64-v8a/

      - name: Create AVD
        run: |
          echo "no" | avdmanager create avd -n testEmulator -k "system-images;android-33;google_apis_playstore;arm64-v8a" -d "pixel" -c 2048M
          # Force config to avoid boot issues
          echo "hw.gpu.enabled=yes" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          echo "hw.gpu.mode=swiftshader_indirect" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          echo "showDeviceFrame=no" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          echo "hw.ramSize=2048" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          echo "vm.heapSize=256" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          echo "disk.dataPartition.size=2G" >> $ANDROID_AVD_HOME/testEmulator.avd/config.ini
          # Verify AVD creation
          avdmanager list avd

      - name: Start Emulator with visible process
        run: |
          echo "Starting emulator..."
          $ANDROID_SDK_ROOT/emulator/emulator -avd testEmulator -no-audio -no-window -gpu swiftshader_indirect -verbose -no-snapshot -no-boot-anim -accel on > emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV
          echo "Emulator started with PID $EMULATOR_PID"
          sleep 5  # Initial delay before checking

      - name: Verify Emulator Process
        run: |
          echo "Current running emulator processes:"
          ps -ef | grep emulator || true
          
          if ! ps -p $EMULATOR_PID > /dev/null; then
            echo "❌ Emulator process $EMULATOR_PID is not running!"
            echo "=== Emulator log ==="
            cat emulator.log
            exit 1
          fi

      - name: Wait for Emulator to Boot
        timeout-minutes: 10
        run: |
          echo "Waiting for emulator..."
          adb start-server
          
          # Wait for device to appear
          for i in {1..30}; do
            if adb devices | grep -q emulator; then
              echo "Device detected"
              break
            fi
            echo "Waiting for device to appear... ($i/30)"
            sleep 5
          done
          
          # Wait for boot completion
          for i in {1..30}; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null || echo "")
            bootanim=$(adb shell getprop init.svc.bootanim 2>/dev/null || echo "running")
            
            if [[ "$boot_completed" == "1" && "$bootanim" == "stopped" ]]; then
              echo "✅ Emulator fully booted!"
              adb shell input keyevent 82  # Wake up device
              exit 0
            fi
            
            echo "Booting... ($i/30) [boot_completed=$boot_completed, bootanim=$bootanim]"
            sleep 5
          done
          
          echo "❌ Emulator failed to boot"
          echo "=== Last 50 lines of emulator.log ==="
          tail -50 emulator.log
          echo "=== ADB devices ==="
          adb devices -l
          exit 1

      - name: Run Logcat
        if: success()
        run: |
          adb logcat > logcat_output.txt &
          LOGCAT_PID=$!
          echo "LOGCAT_PID=$LOGCAT_PID" >> $GITHUB_ENV
          sleep 300  # Capture logs for 5 minutes
          kill $LOGCAT_PID || true

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            emulator.log
            logcat_output.txt
