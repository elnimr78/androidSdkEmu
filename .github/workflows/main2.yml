name: Android Emulator Logcat

on:
  workflow_dispatch:

jobs:
  emulator-logcat:
    runs-on: windows-latest
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}\android-sdk
      ANDROID_HOME: ${{ github.workspace }}\android-sdk
      EMULATOR_NAME: test-emulator

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Set up environment variables
        run: |
          echo "ANDROID_SDK_ROOT=${{ env.ANDROID_SDK_ROOT }}" >> $env:GITHUB_ENV
          echo "ANDROID_HOME=${{ env.ANDROID_HOME }}" >> $env:GITHUB_ENV

      - name: Download Android SDK command line tools
        run: |
          Invoke-WebRequest https://dl.google.com/android/repository/commandlinetools-win-9477386_latest.zip -OutFile cmdline-tools.zip
          Expand-Archive cmdline-tools.zip -DestinationPath "$env:ANDROID_SDK_ROOT\temp"
          mkdir "$env:ANDROID_SDK_ROOT\cmdline-tools\latest" -Force
          Move-Item "$env:ANDROID_SDK_ROOT\temp\cmdline-tools\*" "$env:ANDROID_SDK_ROOT\cmdline-tools\latest"
          Remove-Item -Recurse -Force "$env:ANDROID_SDK_ROOT\temp"
        shell: pwsh

      - name: Add SDK tools to PATH
        run: |
          echo "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin" >> $env:GITHUB_PATH
          echo "$env:ANDROID_SDK_ROOT\platform-tools" >> $env:GITHUB_PATH
          echo "$env:ANDROID_SDK_ROOT\emulator" >> $env:GITHUB_PATH
        shell: pwsh

      - name: Accept Android SDK licenses
        run: |
          mkdir -p "$env:ANDROID_SDK_ROOT\licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$env:ANDROID_SDK_ROOT\licenses\android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$env:ANDROID_SDK_ROOT\licenses\android-sdk-preview-license"
        shell: pwsh

      - name: Set up Java 11
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'
          java-version: '11'

      - name: Install required Android SDK components
        run: |
          $ErrorActionPreference = "Stop"
          & "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\sdkmanager.bat" --sdk_root="$env:ANDROID_SDK_ROOT" "platform-tools" "emulator" "system-images;android-30;google_apis;x86_64"
          & "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\sdkmanager.bat" --licenses --sdk_root="$env:ANDROID_SDK_ROOT"
        shell: pwsh

      - name: List installed SDK components
        run: |
          & "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\sdkmanager.bat" --list_installed --sdk_root="$env:ANDROID_SDK_ROOT"
        shell: pwsh

      - name: Create Emulator
        run: |
          echo no | & "$env:ANDROID_SDK_ROOT\cmdline-tools\latest\bin\avdmanager.bat" create avd -n $env:EMULATOR_NAME -k "system-images;android-30;google_apis;x86_64" --force --device "pixel"
          # Modify config.ini for better performance
          $configPath = "$env:ANDROID_SDK_ROOT\avd\$env:EMULATOR_NAME.avd\config.ini"
          (Get-Content $configPath) -replace "hw.gpu.mode=.*", "hw.gpu.mode=swiftshader_indirect" | Set-Content $configPath
          (Get-Content $configPath) -replace "disk.dataPartition.size=.*", "disk.dataPartition.size=2G" | Set-Content $configPath
        shell: pwsh

      - name: Start Emulator with detailed logging
        run: |
          # Start emulator with logging to file
          $logFile = "$env:GITHUB_WORKSPACE\emulator.log"
          Start-Process -NoNewWindow -FilePath "$env:ANDROID_SDK_ROOT\emulator\emulator.exe" `
            -ArgumentList "-avd $env:EMULATOR_NAME -memory 2048 -cores 2 -no-snapshot -no-audio -gpu swiftshader_indirect -no-boot-anim -verbose -logcat *:v" `
            -RedirectStandardOutput $logFile -RedirectStandardError $logFile -PassThru

          # Wait for device with better checks
          $attempts = 0
          $maxAttempts = 60  # Increased to 10 minutes (60 attempts Ã— 10 seconds)
          $isBooted = $false
          
          Write-Host "Waiting for emulator to boot..."
          
          while (($attempts -lt $maxAttempts) -and (-not $isBooted)) {
              try {
                  $devices = adb devices
                  if ($devices -match $env:EMULATOR_NAME) {
                      $bootStatus = adb shell getprop sys.boot_completed 2>&1
                      if ($bootStatus -eq "1") {
                          $isBooted = $true
                          Write-Host "Emulator booted successfully!"
                          break
                      }
                  }
              } catch {
                  Write-Host "Waiting for ADB connection..."
              }
              
              $attempts++
              Start-Sleep -Seconds 10
              Write-Host "Boot attempt $attempts/$maxAttempts"
          }
          
          if (-not $isBooted) {
              Write-Host "::error::Emulator failed to boot within the allotted time"
              Write-Host "Last ADB devices output:"
              adb devices
              Write-Host "Emulator log tail:"
              Get-Content "$env:GITHUB_WORKSPACE\emulator.log" -Tail 50
              exit 1
          }
          
          # Additional checks after boot
          Write-Host "Emulator status:"
          adb shell getprop
        shell: pwsh

      - name: Upload emulator logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: emulator.log

      - name: Logcat Output
        run: |
          adb logcat -d > logcat_output.txt
          Get-Content logcat_output.txt -Head 100
        shell: pwsh

      - name: Upload Logcat Output
        uses: actions/upload-artifact@v4
        with:
          name: logcat-output
          path: logcat_output.txt
