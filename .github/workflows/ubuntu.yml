name: Android Emulator CI (Ubuntu 24.04)

on:
  workflow_dispatch:
  pull_request:
  push:
    branches: [ main ]

jobs:
  android-emulator:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    env:
      ANDROID_SDK_ROOT: ${{ github.workspace }}/android-sdk
      ANDROID_HOME: ${{ github.workspace }}/android-sdk
      EMULATOR_NAME: test-emulator
      API_LEVEL: 34
      ARCH: x86_64
      PROFILE: pixel_7_pro

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up environment variables
        run: |
          echo "ANDROID_SDK_ROOT=$ANDROID_SDK_ROOT" >> $GITHUB_ENV
          echo "ANDROID_HOME=$ANDROID_HOME" >> $GITHUB_ENV

      - name: Install system dependencies
        run: |
          sudo apt-get update -qq
          sudo apt-get install -y \
            libpulse0 \
            libglx-mesa0 \
            libegl-mesa0 \
            libgl1 \
            openjdk-17-jdk \
            qemu-kvm \
            libnss3 \
            libxcomposite1 \
            libxcursor1 \
            libxi6 \
            libxtst6 \
            ca-certificates \
            curl \
            unzip \
            git

      - name: Check KVM availability
        run: |
          if [ ! -c /dev/kvm ]; then
            echo "::warning::KVM not available, emulator will run slower"
          else
            sudo chmod a+rw /dev/kvm
          fi

      - name: Download Android Command Line Tools
        run: |
          mkdir -p $ANDROID_SDK_ROOT/cmdline-tools/latest
          curl -s https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip -o cmdline-tools.zip
          unzip -qq cmdline-tools.zip -d $ANDROID_SDK_ROOT/cmdline-tools/latest
          mv $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/* $ANDROID_SDK_ROOT/cmdline-tools/latest/
          rm -r $ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools cmdline-tools.zip

      - name: Add Android tools to PATH
        run: |
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/emulator" >> $GITHUB_PATH

      - name: Accept licenses
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/licenses"
          echo "24333f8a63b6825ea9c5514f83c2829b004d1fee" > "$ANDROID_SDK_ROOT/licenses/android-sdk-license"
          echo "84831b9409646a918e30573bab4c9c91346d8abd" > "$ANDROID_SDK_ROOT/licenses/android-sdk-preview-license"
          yes | sdkmanager --licenses --sdk_root=$ANDROID_SDK_ROOT || true

      - name: Install Android SDK components
        run: |
          sdkmanager --sdk_root=$ANDROID_SDK_ROOT --install \
            "platform-tools" \
            "emulator" \
            "platforms;android-$API_LEVEL" \
            "system-images;android-$API_LEVEL;google_apis;$ARCH"

      - name: Create Android Virtual Device
        run: |
          echo no | avdmanager create avd \
            --name $EMULATOR_NAME \
            --package "system-images;android-$API_LEVEL;google_apis;$ARCH" \
            --device "$PROFILE" \
            --force

          # Wait for AVD files to be created
          CONFIG_FILE="$ANDROID_SDK_ROOT/avd/$EMULATOR_NAME.avd/config.ini"
          attempts=0
          max_attempts=10
          
          while [ ! -f "$CONFIG_FILE" ] && [ $attempts -lt $max_attempts ]; do
            attempts=$((attempts+1))
            sleep 2
            echo "Waiting for AVD configuration... ($attempts/$max_attempts)"
          done
          
          if [ ! -f "$CONFIG_FILE" ]; then
            echo "::error::AVD configuration file not found at $CONFIG_FILE"
            echo "Contents of AVD directory:"
            ls -la "$ANDROID_SDK_ROOT/avd/$EMULATOR_NAME.avd/" || true
            exit 1
          fi
          
          # Configure AVD
          echo "hw.gpu.mode=auto" >> "$CONFIG_FILE"
          echo "hw.gpu.enabled=yes" >> "$CONFIG_FILE"
          echo "hw.keyboard=yes" >> "$CONFIG_FILE"
          echo "hw.ramSize=2048" >> "$CONFIG_FILE"
          echo "vm.heapSize=512" >> "$CONFIG_FILE"
          echo "disk.dataPartition.size=4G" >> "$CONFIG_FILE"

      - name: Start emulator in background
        run: |
          # Start emulator with verbose logging
          nohup $ANDROID_SDK_ROOT/emulator/emulator \
            -avd $EMULATOR_NAME \
            -no-window \
            -no-boot-anim \
            -no-audio \
            -gpu auto \
            -memory 2048 \
            -cores 2 \
            -accel on \
            -logcat *:V > emulator.log 2>&1 &
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV

      - name: Wait for emulator to boot
        timeout-minutes: 10
        run: |
          # Wait for device to appear in adb
          adb wait-for-device
          
          # Wait for boot completion
          boot_completed=false
          for i in {1..60}; do
            if adb shell getprop sys.boot_completed | grep -q "1"; then
              boot_completed=true
              break
            fi
            sleep 5
            echo "Waiting for emulator to boot... ($i/60)"
          done
          
          if [ "$boot_completed" = false ]; then
            echo "::error::Emulator failed to boot"
            echo "Emulator log tail:"
            tail -n 50 emulator.log
            echo "Last logcat:"
            adb logcat -d | tail -n 50
            exit 1
          fi
          
          # Unlock the device
          adb shell input keyevent 82
          echo "Emulator booted successfully"

      - name: Run tests
        run: |
          # Your test commands here
          echo "Running tests..."
          adb devices
          adb shell getprop
          adb logcat -d > logcat.txt

      - name: Upload emulator logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            emulator.log
            logcat.txt

      - name: Stop emulator
        if: always()
        run: |
          if [ -n "$EMULATOR_PID" ]; then
            kill $EMULATOR_PID || true
          fi
          adb emu kill || true
          echo "Emulator stopped"
