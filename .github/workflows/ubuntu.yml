name: Android Emulator on Ubuntu (ARM)

on:
  workflow_dispatch:

jobs:
  emulator-job:
    runs-on: ubuntu-latest  # Better for ARM emulation
    timeout-minutes: 30

    steps:
      - name: Cleanup previous runs
        run: |
          pkill -f "emulator" || true
          pkill -f "adb" || true
          rm -rf "${{ runner.temp }}/android-sdk" "${{ runner.temp }}/android-avd"

      - name: Set environment variables
        run: |
          echo "ANDROID_SDK_ROOT=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_HOME=${{ runner.temp }}/android-sdk" >> $GITHUB_ENV
          echo "ANDROID_AVD_HOME=${{ runner.temp }}/android-avd" >> $GITHUB_ENV
          mkdir -p "${{ runner.temp }}/android-avd"

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y libgl1-mesa-dev libpulse-dev libasound2-dev

      - name: Install Android SDK
        run: |
          mkdir -p "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          curl -fo commandlinetools-linux.zip https://dl.google.com/android/repository/commandlinetools-linux-10406996_latest.zip
          unzip -q commandlinetools-linux.zip -d "$ANDROID_SDK_ROOT/cmdline-tools/latest"
          mv "$ANDROID_SDK_ROOT/cmdline-tools/latest/cmdline-tools/"* "$ANDROID_SDK_ROOT/cmdline-tools/latest/"
          rm commandlinetools-linux.zip
          echo "$ANDROID_SDK_ROOT/cmdline-tools/latest/bin" >> $GITHUB_PATH
          echo "$ANDROID_SDK_ROOT/platform-tools" >> $GITHUB_PATH

      - name: Install packages (ARM system image)
        run: |
          yes | sdkmanager --licenses
          sdkmanager "platform-tools" "emulator" "system-images;android-33;google_apis_playstore;arm64-v8a"

      - name: Create AVD (ARM config)
        run: |
          echo "no" | avdmanager create avd \
            -n testEmulator \
            -k "system-images;android-33;google_apis_playstore;arm64-v8a" \
            -d pixel \
            -c 2048M

          # Optimized AVD config for ARM emulation
          cat <<EOF >> "$ANDROID_AVD_HOME/testEmulator.avd/config.ini"
          hw.gpu.enabled=yes
          hw.gpu.mode=swiftshader
          hw.ramSize=1536  # Reduced for stability
          vm.heapSize=256
          disk.dataPartition.size=2G
          image.sysdir.1=system-images/android-33/google_apis_playstore/arm64-v8a/
          EOF

      - name: Start Emulator (ARM-compatible)
        run: |
          echo "=== Starting Emulator (ARM) ==="
          $ANDROID_SDK_ROOT/emulator/emulator \
            -avd testEmulator \
            -no-audio \
            -no-window \
            -no-snapshot \
            -no-accel \          # Disable HVF/KVM
            -gpu swiftshader \   # Force software rendering
            -verbose > emulator.log 2>&1 &
          
          EMULATOR_PID=$!
          echo "EMULATOR_PID=$EMULATOR_PID" >> $GITHUB_ENV

          # Debug: Verify process
          sleep 10
          echo "=== Running Processes ==="
          ps -ef | grep emulator || true
          echo "=== Port Check ==="
          netstat -tuln | grep 555 || true
          echo "=== Emulator Log Head ==="
          head -50 emulator.log

      - name: Wait for boot (Extended timeout)
        timeout-minutes: 15  # ARM emulation is slower
        run: |
          echo "=== Waiting for Boot (ARM) ==="
          adb start-server
          
          # Phase 1: Wait for ADB connection
          for i in {1..60}; do
            DEVICES=$(adb devices)
            echo "$DEVICES"
            if echo "$DEVICES" | grep -q emulator; then
              echo "✅ ADB Connected"
              break
            fi
            echo "Waiting for ADB ($i/60)..."
            sleep 5
          done

          # Phase 2: Wait for full boot
          for i in {1..60}; do
            boot_completed=$(adb shell getprop sys.boot_completed 2>/dev/null || echo "")
            bootanim=$(adb shell getprop init.svc.bootanim 2>/dev/null || echo "running")
            
            if [[ "$boot_completed" == "1" && "$bootanim" == "stopped" ]]; then
              echo "✅ Fully Booted!"
              adb shell input keyevent 82  # Wake up
              exit 0
            fi
            
            echo "Booting... ($i/60) [boot_completed=$boot_completed, bootanim=$bootanim]"
            sleep 5
          done

          # Failure diagnostics
          echo "❌ Boot Failed!"
          echo "=== Last 100 Log Lines ==="
          tail -100 emulator.log
          echo "=== ADB Devices ==="
          adb devices -l
          echo "=== ADB Properties ==="
          adb shell getprop || true
          exit 1

      - name: Capture Logs
        if: always()
        run: |
          echo "=== Final Diagnostics ==="
          echo "--- Processes ---"
          ps -ef | grep -E 'emulator|adb'
          echo "--- Network Ports ---"
          netstat -tuln | grep 555 || true
          echo "--- ADB Info ---"
          adb devices -l
          adb shell getprop || true
          echo "--- Logs ---"
          adb logcat -d > logcat.txt || true
          tail -200 emulator.log > emulator-tail.log

      - name: Upload Logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: emulator-logs
          path: |
            logcat.txt
            emulator.log
            emulator-tail.log
